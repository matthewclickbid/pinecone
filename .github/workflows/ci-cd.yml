name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'
  AWS_REGION: 'us-east-1'
  
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run type checking
      run: |
        mypy --install-types --non-interactive --ignore-missing-imports .
      continue-on-error: true
    
    - name: Run unit tests
      run: |
        pytest tests/unit -v --cov=services --cov=utils --cov-report=xml --cov-report=term
    
    - name: Run integration tests
      run: |
        pytest tests/integration -v --cov=main_handler --cov=async_handler --cov=task_status --cov=step_functions --cov-report=xml --cov-report=term --cov-append
    
    - name: Run e2e tests
      run: |
        pytest tests/e2e -v --cov-append
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Generate coverage report
      run: |
        coverage report
        coverage html
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: bandit -r . -ll -i tests/
    
    - name: Check for vulnerable dependencies
      run: safety check --json
      continue-on-error: true

  build:
    name: Build SAM Application
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2
    
    - name: Build SAM application
      run: |
        sam build --use-container
    
    - name: Validate SAM template
      run: |
        sam validate --lint
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sam-build
        path: .aws-sam/build/

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: sam-build
        path: .aws-sam/build/
    
    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to Development
      run: |
        sam deploy \
          --stack-name vectordb-catchup-dev \
          --s3-bucket ${{ secrets.SAM_DEPLOYMENT_BUCKET }} \
          --parameter-overrides \
            MetabaseUrl=${{ secrets.DEV_METABASE_URL }} \
            MetabaseApiKey=${{ secrets.DEV_METABASE_API_KEY }} \
            MetabaseQuestionId=${{ secrets.DEV_METABASE_QUESTION_ID }} \
            OpenAIApiKey=${{ secrets.DEV_OPENAI_API_KEY }} \
            PineconeApiKey=${{ secrets.DEV_PINECONE_API_KEY }} \
            PineconeIndexName=${{ secrets.DEV_PINECONE_INDEX_NAME }} \
            PineconeNamespace=dev \
            ApiKey=${{ secrets.DEV_API_KEY }} \
          --capabilities CAPABILITY_IAM \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset
    
    - name: Run smoke tests
      run: |
        API_ENDPOINT=$(aws cloudformation describe-stacks \
          --stack-name vectordb-catchup-dev \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayEndpoint`].OutputValue' \
          --output text)
        
        echo "Testing API endpoint: $API_ENDPOINT"
        
        # Test health check
        curl -f -X GET "$API_ENDPOINT/health" \
          -H "x-api-key: ${{ secrets.DEV_API_KEY }}" || exit 1

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: sam-build
        path: .aws-sam/build/
    
    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to Production
      run: |
        sam deploy \
          --stack-name vectordb-catchup-prod \
          --s3-bucket ${{ secrets.SAM_DEPLOYMENT_BUCKET }} \
          --parameter-overrides \
            MetabaseUrl=${{ secrets.PROD_METABASE_URL }} \
            MetabaseApiKey=${{ secrets.PROD_METABASE_API_KEY }} \
            MetabaseQuestionId=${{ secrets.PROD_METABASE_QUESTION_ID }} \
            OpenAIApiKey=${{ secrets.PROD_OPENAI_API_KEY }} \
            PineconeApiKey=${{ secrets.PROD_PINECONE_API_KEY }} \
            PineconeIndexName=${{ secrets.PROD_PINECONE_INDEX_NAME }} \
            PineconeNamespace=prod \
            ApiKey=${{ secrets.PROD_API_KEY }} \
          --capabilities CAPABILITY_IAM \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset
    
    - name: Create deployment notification
      if: success()
      run: |
        echo "Production deployment successful!"
        # Add notification logic here (Slack, email, etc.)

  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    
    steps:
    - name: Delete workflow artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
        name: |
          sam-build
          coverage-report